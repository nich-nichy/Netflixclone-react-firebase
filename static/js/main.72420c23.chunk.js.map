{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchTamilMovies","fetchDocumentaries","fetchChild","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72420c23.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row( { title, fetchUrl, isLargeRow } ) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        //if [], run once when the row loads, and dont run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts ={\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            // something\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    };\r\n\r\n    console.log(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img\r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                     alt={movie.name}></img>\r\n                ))}\r\n            </div>\r\n            {/*container -> posters */}\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"805bcd1f0ee81515f1007bbcb8354197\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&launguage=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&launguage=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchTamilMovies: `/discover/movie?api_key=${API_KEY}&with_genres=67`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    fetchChild: `/discover/movie?certification_country=US&certification.lte=G&sort_by=popularity.desc`,\r\n    \r\n\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\";\r\n\r\n\r\nfunction Banner() {\r\nconst [movie, setMovie] = useState ([]);\r\n\r\nuseEffect(() => {\r\n    async function fetchData() {\r\n        const request = await axios.get(requests.fetchNetflixOriginals);\r\n        setMovie(\r\n            request.data.results[\r\n            Math.floor(Math.random() * request.data.results.length - 1) \r\n        ]\r\n        );\r\n        return request;\r\n    }\r\n    fetchData();\r\n}, []);\r\n\r\nconsole.log(movie);\r\n\r\nfunction truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n}\r\n    return (\r\n        <header\r\n        className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition: \"center center\",\r\n        }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                    </h1>\r\n                    <div className=\"banner--fadeBottom\" />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState (false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false); \r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n            className=\"nav__logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\r\n            alt=\"Netflix Logo\" \r\n            />\r\n            <img\r\n            className=\"nav__avatar\"\r\n            src=\"https://pbs.twimg.com/media/DlKNEufWsAAgr2E?format=jpg&name=small\"\r\n            alt=\"Netflix Logo\" \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n        <Row title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals} \n        isLargeRow={true}/>\n        <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n        <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n        <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n        <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n        <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n        \n\n\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}